@page "/"
@inject HttpClient httpclient
@inject NavigationManager navman
@inject OrderState OrderState


<div class="main">
    <ul class="pizza-cards">
        @if (specials != null)
        {
            @foreach (var special in specials)
            {
                <li @onclick="@(()=> OrderState.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
        }
    </ul>
</div>
<div class="sidebar">
    @if (OrderState.Order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in OrderState.Order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="configuredPizza" OnRemoved="@(() => OrderState.RemoveConfiguredPizza(configuredPizza))" />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

<div class="order-total @(OrderState.Order.Pizzas.Any() ? "" : "hidden")">
    Total:
    <span class="total-price">@OrderState.Order.GetFormattedTotalPrice()</span>

    <a href="checkout" class="@(OrderState.Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
        Order >
    </a>
    @*<button class="btn btn-warning" disabled="@(OrderState.Order.Pizzas.Count == 0)" @onclick="PlaceOrder">
        Order >
    </button>*@
</div>
</div>
@if (OrderState.ShowingConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="OrderState.ConfiguringPizza" OnCancel="OrderState.CancelConfigurePizzaDialog" OnConfirm="OrderState.ConfirmConfigurePizzaDialog" />
}

@code{
    List<PizzaSpecial> specials;
    //Pizza configuringPizza;
    //bool showingConfigureDialog;
    //Order order = new Order();


    protected async override Task OnInitializedAsync()
    {
        specials = await httpclient.GetFromJsonAsync<List<PizzaSpecial>>("specials");
    }
    #region Deleted due to OrderState
    //void ShowConfigurePizzaDialog(PizzaSpecial special)
    //{
    //    configuringPizza = new Pizza()
    //    {
    //        Special = special,
    //        SpecialId = special.Id,
    //        Size = Pizza.DefaultSize,
    //        Toppings = new List<PizzaTopping>(),
    //    };

    //    showingConfigureDialog = true;
    //}


    //void ConfirmConfigurePizzaDialog()
    //{
    //    order.Pizzas.Add(configuringPizza);
    //    configuringPizza = null;

    //    showingConfigureDialog = false;
    //}

    //void CancelConfigurePizzaDialog()
    //{
    //    configuringPizza = null;
    //    showingConfigureDialog = false;
    //}
    //void RemoveConfiguredPizza(Pizza pizza)
    //{
    //    order.Pizzas.Remove(pizza);
    //}

    #endregion

    //async Task PlaceOrder()
    //{
    //    var response = await httpclient.PostAsJsonAsync("orders", OrderState.Order);
    //    var newOrderId = await response.Content.ReadFromJsonAsync<int>();
    //    OrderState.ResetOrder();
    //    navman.NavigateTo($"myorders/{newOrderId}");
    //}
}